// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// @seed="tsx prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - represents users of the platform
model User {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  password        String   // Hashed password
  location        String?
  profilePhoto    String?
  availability    String[] // Array of availability strings like ['weekends', 'evenings']
  isPublic        Boolean  @default(true)
  rating          Float    @default(0)
  swapsCompleted  Int      @default(0)
  isAdmin         Boolean  @default(false)
  isBanned        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userSkills      UserSkill[]
  badges          UserBadge[]
  
  // Swap requests
  swapRequestsSent     SwapRequest[] @relation("SwapRequester")
  swapRequestsReceived SwapRequest[] @relation("SwapReceiver")
  
  // Ratings
  ratingsGiven    Rating[] @relation("RatingGiver")
  ratingsReceived Rating[] @relation("RatingReceiver")
  
  // Messages
  messagesSent    Message[] @relation("MessageSender")
  messagesReceived Message[] @relation("MessageReceiver")

  // Notifications
  notifications   Notification[]

  @@map("users")
}

// Skill model - represents skills that can be offered/wanted
model Skill {
  id          String   @id @default(cuid())
  name        String
  category    String
  level       SkillLevel
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userSkills UserSkill[]
  swapRequestsAsRequesterSkill SwapRequest[] @relation("RequesterSkill")
  swapRequestsAsReceiverSkill  SwapRequest[] @relation("ReceiverSkill")

  @@unique([name, category])
  @@map("skills")
}

// UserSkill model - junction table for user-skill relationships
model UserSkill {
  id        String   @id @default(cuid())
  userId    String
  skillId   String
  isOffered Boolean  // true = offered, false = wanted
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId, isOffered])
  @@map("user_skills")
}

// Badge model - represents achievements/badges
model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  rarity      BadgeRarity
  createdAt   DateTime @default(now())

  // Relations
  userBadges UserBadge[]

  @@map("badges")
}

// UserBadge model - junction table for user-badge relationships
model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  unlockedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// SwapRequest model - represents skill swap requests between users
model SwapRequest {
  id              String        @id @default(cuid())
  requesterId     String
  receiverId      String
  requesterSkillId String
  receiverSkillId  String
  status          SwapStatus    @default(PENDING)
  message         String?
  scheduledDate   DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  requester       User          @relation("SwapRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  receiver        User          @relation("SwapReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  requesterSkill  Skill         @relation("RequesterSkill", fields: [requesterSkillId], references: [id], onDelete: Cascade)
  receiverSkill   Skill         @relation("ReceiverSkill", fields: [receiverSkillId], references: [id], onDelete: Cascade)
  
  // Related ratings
  ratings Rating[]

  @@map("swap_requests")
}

// Rating model - represents ratings given after completed swaps
model Rating {
  id          String   @id @default(cuid())
  swapId      String
  raterId     String
  ratedUserId String
  rating      Int      // 1-5 stars
  feedback    String?
  createdAt   DateTime @default(now())

  // Relations
  swap        SwapRequest @relation(fields: [swapId], references: [id], onDelete: Cascade)
  rater       User        @relation("RatingGiver", fields: [raterId], references: [id], onDelete: Cascade)
  ratedUser   User        @relation("RatingReceiver", fields: [ratedUserId], references: [id], onDelete: Cascade)

  @@unique([swapId, raterId]) // One rating per swap per user
  @@map("ratings")
}

// Message model - represents messages between users
model Message {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  isRead      Boolean  @default(false)
  timestamp   DateTime @default(now())

  // Relations
  sender    User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Notification model - represents user notifications
model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  type        NotificationType
  isRead      Boolean  @default(false)
  relatedId   String?  // ID of related swap, message, etc.
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// AdminAnnouncement model - represents system announcements
model AdminAnnouncement {
  id        String                @id @default(cuid())
  title     String
  message   String
  type      AnnouncementType
  isActive  Boolean               @default(true)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@map("admin_announcements")
}

// Enums
enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum AnnouncementType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

enum NotificationType {
  SWAP_REQUEST
  SWAP_ACCEPTED
  SWAP_REJECTED
  SWAP_COMPLETED
  MESSAGE
  SYSTEM
}
